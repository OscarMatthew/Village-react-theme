{"ast":null,"code":"\"use strict\"; // Here we mock the global `process` variable in case we are not in Node's environment.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createProcess = void 0;\n/**\n * Looks to return a `process` object, if one is available.\n *\n * The global `process` is returned if defined;\n * otherwise `require('process')` is attempted.\n *\n * If that fails, `undefined` is returned.\n *\n * @return {IProcess | undefined}\n */\n\nvar maybeReturnProcess = function () {\n  if (typeof process !== 'undefined') {\n    return process;\n  }\n\n  try {\n    return require('process');\n  } catch (_a) {\n    return undefined;\n  }\n};\n\nfunction createProcess() {\n  var p = maybeReturnProcess() || {};\n  if (!p.getuid) p.getuid = function () {\n    return 0;\n  };\n  if (!p.getgid) p.getgid = function () {\n    return 0;\n  };\n  if (!p.cwd) p.cwd = function () {\n    return '/';\n  };\n  if (!p.nextTick) p.nextTick = require('./setImmediate').default;\n  if (!p.emitWarning) p.emitWarning = function (message, type) {\n    // tslint:disable-next-line:no-console\n    console.warn(\"\".concat(type).concat(type ? ': ' : '').concat(message));\n  };\n  if (!p.env) p.env = {};\n  return p;\n}\n\nexports.createProcess = createProcess;\nexports.default = createProcess();","map":{"version":3,"sources":["/Users/soladev/Desktop/react-solasite/node_modules/memfs/lib/process.js"],"names":["Object","defineProperty","exports","value","createProcess","maybeReturnProcess","process","require","_a","undefined","p","getuid","getgid","cwd","nextTick","default","emitWarning","message","type","console","warn","concat","env"],"mappings":"AAAA,a,CACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,aAAR,GAAwB,KAAK,CAA7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,kBAAkB,GAAG,YAAY;AACjC,MAAI,OAAOC,OAAP,KAAmB,WAAvB,EAAoC;AAChC,WAAOA,OAAP;AACH;;AACD,MAAI;AACA,WAAOC,OAAO,CAAC,SAAD,CAAd;AACH,GAFD,CAGA,OAAOC,EAAP,EAAW;AACP,WAAOC,SAAP;AACH;AACJ,CAVD;;AAWA,SAASL,aAAT,GAAyB;AACrB,MAAIM,CAAC,GAAGL,kBAAkB,MAAM,EAAhC;AACA,MAAI,CAACK,CAAC,CAACC,MAAP,EACID,CAAC,CAACC,MAAF,GAAW,YAAY;AAAE,WAAO,CAAP;AAAW,GAApC;AACJ,MAAI,CAACD,CAAC,CAACE,MAAP,EACIF,CAAC,CAACE,MAAF,GAAW,YAAY;AAAE,WAAO,CAAP;AAAW,GAApC;AACJ,MAAI,CAACF,CAAC,CAACG,GAAP,EACIH,CAAC,CAACG,GAAF,GAAQ,YAAY;AAAE,WAAO,GAAP;AAAa,GAAnC;AACJ,MAAI,CAACH,CAAC,CAACI,QAAP,EACIJ,CAAC,CAACI,QAAF,GAAaP,OAAO,CAAC,gBAAD,CAAP,CAA0BQ,OAAvC;AACJ,MAAI,CAACL,CAAC,CAACM,WAAP,EACIN,CAAC,CAACM,WAAF,GAAgB,UAAUC,OAAV,EAAmBC,IAAnB,EAAyB;AACrC;AACAC,IAAAA,OAAO,CAACC,IAAR,CAAa,GAAGC,MAAH,CAAUH,IAAV,EAAgBG,MAAhB,CAAuBH,IAAI,GAAG,IAAH,GAAU,EAArC,EAAyCG,MAAzC,CAAgDJ,OAAhD,CAAb;AACH,GAHD;AAIJ,MAAI,CAACP,CAAC,CAACY,GAAP,EACIZ,CAAC,CAACY,GAAF,GAAQ,EAAR;AACJ,SAAOZ,CAAP;AACH;;AACDR,OAAO,CAACE,aAAR,GAAwBA,aAAxB;AACAF,OAAO,CAACa,OAAR,GAAkBX,aAAa,EAA/B","sourcesContent":["\"use strict\";\n// Here we mock the global `process` variable in case we are not in Node's environment.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createProcess = void 0;\n/**\n * Looks to return a `process` object, if one is available.\n *\n * The global `process` is returned if defined;\n * otherwise `require('process')` is attempted.\n *\n * If that fails, `undefined` is returned.\n *\n * @return {IProcess | undefined}\n */\nvar maybeReturnProcess = function () {\n    if (typeof process !== 'undefined') {\n        return process;\n    }\n    try {\n        return require('process');\n    }\n    catch (_a) {\n        return undefined;\n    }\n};\nfunction createProcess() {\n    var p = maybeReturnProcess() || {};\n    if (!p.getuid)\n        p.getuid = function () { return 0; };\n    if (!p.getgid)\n        p.getgid = function () { return 0; };\n    if (!p.cwd)\n        p.cwd = function () { return '/'; };\n    if (!p.nextTick)\n        p.nextTick = require('./setImmediate').default;\n    if (!p.emitWarning)\n        p.emitWarning = function (message, type) {\n            // tslint:disable-next-line:no-console\n            console.warn(\"\".concat(type).concat(type ? ': ' : '').concat(message));\n        };\n    if (!p.env)\n        p.env = {};\n    return p;\n}\nexports.createProcess = createProcess;\nexports.default = createProcess();\n"]},"metadata":{},"sourceType":"script"}